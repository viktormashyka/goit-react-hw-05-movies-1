{"version":3,"file":"static/js/597.d41a206d.chunk.js","mappings":"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","sources":["api.js","components/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n// import PropTypes from 'prop-types';\n\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '857288c3c5f42347171bc7541b9a4b57';\n\nexport const fetchMoviesTrendingToday = async signal => {\n  const url = `${BASE_URL}3/trending/movie/day?api_key=${API_KEY}&language=en-US&page=1&include_adult=false`;\n  try {\n    const response = await axios.get(url, { signal: signal });\n    console.log(\n      'fetchMoviesTrendingToday response.data.results, ',\n      response.data.results\n    );\n    const movies = getNormalizedMovies(response.data.results);\n    return movies;\n  } catch (error) {\n    if (axios.isCancel(error)) {\n      return [];\n    }\n    throw new Error(error);\n  }\n};\n\n// export const fetchMoviesTrendingToday = async () => {\n//   const url = `${BASE_URL}3/trending/movie/day?api_key=${API_KEY}&language=en-US&page=1&include_adult=false`;\n//   try {\n//     const response = await axios.get(url);\n//     console.log(\n//       'fetchMoviesTrendingToday response.data.results, ',\n//       response.data.results\n//     );\n//     const movies = getNormalizedMovies(response.data.results);\n//     return movies;\n//   } catch (error) {\n//     throw new Error(error);\n//   }\n// };\n\nexport const fetchMoviesByName = async ({ query }) => {\n  const url = `${BASE_URL}3/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`;\n  try {\n    const response = await axios.get(url);\n    console.log(\n      'fetchMoviesByName response.data.results, ',\n      response.data.results\n    );\n    const movies = getNormalizedMovies(response.data.results);\n    return movies;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nconst getNormalizedMovies = movies => {\n  const normalizedData = movies.map(\n    ({ id, original_title, title, overview, genres }) => {\n      return { id, original_title, title, overview, genres };\n    }\n  );\n  return normalizedData;\n};\n\nexport const fetchMovieById = async ({ movieId }) => {\n  const url = `${BASE_URL}3/movie/${movieId}?api_key=${API_KEY}&language=en-US&page=1&include_adult=false`;\n  try {\n    const response = await axios.get(url);\n    console.log('fetchMoviesById response.data, ', response.data);\n    // const movie = getNormalizedMovies(response.data.results);\n    // const movie = response.data;\n    const movie = normalizeMovieDetailsData(response.data);\n    return movie;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nconst normalizeMovieDetailsData = data => {\n  const { title, poster_path, vote_average, overview, release_date, genres } =\n    data;\n\n  const posterUrl = 'https://image.tmdb.org/t/p/w300' + poster_path;\n  const year = new Date(release_date).getFullYear();\n  const userScore = Number.parseInt(vote_average * 10);\n  const genresList = genres.map(({ name }) => name).join(', ');\n\n  return {\n    title,\n    overview,\n    posterUrl,\n    year,\n    userScore,\n    genresList,\n  };\n};\n\nexport const fetchMovieByIdCast = async ({ movieId }) => {\n  const url = `${BASE_URL}3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US&page=1&include_adult=false`;\n  try {\n    const response = await axios.get(url);\n    console.log('fetchMovieByIdCast response.data.cast, ', response.data.cast);\n    // const movie = getNormalizedMovies(response.data.results);\n    const cast = response.data.cast;\n    return cast;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieByIdReviews = async ({ movieId }) => {\n  const url = `${BASE_URL}3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1&include_adult=false`;\n  try {\n    const response = await axios.get(url);\n    console.log(\n      'fetchMovieByIdReviews response.data.results, ',\n      response.data.results\n    );\n    // const movie = getNormalizedMovies(response.data.results);\n    const movie = response.data.results;\n    return movie;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieByIdCast } from 'api';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCast = async () => {\n      const cast = await fetchMovieByIdCast({ movieId });\n      setCast(cast);\n    };\n    getCast();\n  }, [movieId]);\n\n  const strPoster = 'https://image.tmdb.org/t/p/w300';\n\n  return (\n    <section>\n      <div>\n        {cast.length > 0 ? (\n          <ul>\n            {cast.map(c => (\n              <li key={c.id}>\n                <img src={strPoster + c.profile_path} alt={c.name} />\n                <p>{c.name}</p>\n                <p>Character: {c.character}</p>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>We don't have information about movie cast.</p>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default Cast;"],"names":["BASE_URL","API_KEY","fetchMoviesTrendingToday","signal","url","axios","response","console","log","data","results","movies","getNormalizedMovies","Error","fetchMoviesByName","query","map","id","original_title","title","overview","genres","fetchMovieById","movieId","movie","normalizeMovieDetailsData","poster_path","vote_average","release_date","posterUrl","year","Date","getFullYear","userScore","Number","parseInt","genresList","name","join","fetchMovieByIdCast","cast","fetchMovieByIdReviews","useState","setCast","useParams","useEffect","getCast","length","c","src","profile_path","alt","character"],"sourceRoot":""}